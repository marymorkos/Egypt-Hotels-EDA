# -*- coding: utf-8 -*-
"""EgyptHotelReview.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T9AH2RlCK7N3mbiqVTV0hSwD9gwFYiMR

# Importing essential libraries for data handling, visualization, and geospatial analysis
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import geopandas as gpd
from shapely.geometry import Point

sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (10, 6)

"""# Initial data inspection"""

from google.colab import files
import pandas as pd

uploaded = files.upload()

data = pd.read_csv("Egypt_hotels_data.csv")

print("First few rows of the dataset:\n", data.head())

print("\nData Summary:\n", data.info())

print("\nSummary Statistics:\n", data.describe())

def clean_data(df):
    df = df.dropna(subset=['Overall Rating'])
    df['Location Rating'] = df['Location Rating'].fillna(df['Location Rating'].median())
    df['Total Rate (Lowest)'] = df['Total Rate (Lowest)'].replace(r'[EGP,]', '', regex=True).astype(float)
    df['Rate per Night (Lowest)'] = df['Rate per Night (Lowest)'].replace(r'[EGP,]', '', regex=True).astype(float)
    return df
data = clean_data(data)

def summarize_data(df):
    print("Summary Statistics:\n", df.describe())
    print("\nMissing Values:\n", df.isnull().sum())
summarize_data(data)

"""# Visualization"""

amenity_counts = data['Amenities'].value_counts().head(10)
print("Top 10 Amenities:\n", amenity_counts)

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Location Rating', y='Overall Rating', data=data)
plt.title("Location Rating vs. Overall Rating")
plt.xlabel("Location Rating")
plt.ylabel("Overall Rating")
plt.show()

data['geometry'] = data.apply(lambda x: Point(float(x['Longitude']), float(x['Latitude'])), axis=1)
gdf = gpd.GeoDataFrame(data, geometry='geometry')

gdf.plot(marker='o', color='blue', markersize=5)
plt.title("Hotel Locations in Egypt")
plt.xlabel("Longitude")
plt.ylabel("Latitude")
plt.show()

sns.scatterplot(x='Location Rating', y='Overall Rating', data=data)
sns.regplot(x='Location Rating', y='Overall Rating', data=data, scatter=False, color='red')
plt.title("Relationship between Location Rating and Overall Hotel Rating in Egypt")
plt.xlabel("Location Rating")
plt.ylabel("Overall Rating")
plt.show()

"""
# Interactive Map"""

##Map Packages
import folium
from folium import Marker
from folium.plugins import MarkerCluster, HeatMap

# Define the center and restricted bounds for Egypt
map_center = [26.8206, 30.8025]  # Egypt's central coordinates
bounds = [[22, 24], [32, 37]]    # Approximate lat/lon boundaries for Egypt

# Create the map with specific tile and zoom settings
m = folium.Map(
    location=map_center,
    zoom_start=6,
    tiles="OpenStreetMap",  # Use OpenStreetMap for better compatibility
    max_bounds=True
)
m.fit_bounds(bounds)  # Restrict the view to Egypt's bounds

# Use a MarkerCluster to avoid marker clutter
marker_cluster = MarkerCluster().add_to(m)

# Color-coding function for hotel ratings
def get_color(rating):
    if rating >= 4:
        return 'green'
    elif 2 <= rating < 4:
        return 'orange'
    else:
        return 'red'

# Add markers to the map with color-coding and detailed popups
for idx, row in data.iterrows():
    color = get_color(row['Overall Rating'])
    popup_content = (f"<strong>{row['Name']}</strong><br>"
                     f"Rating: {row['Overall Rating']}<br>"
                     f"Rate per Night: {row['Rate per Night (Lowest)']}<br>"
                     f"Location Rating: {row['Location Rating']}")

    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=popup_content,
        icon=folium.Icon(color=color)
    ).add_to(marker_cluster)

# Add a heatmap layer to show density
heat_data = [[row['Latitude'], row['Longitude']] for idx, row in data.iterrows()]
HeatMap(heat_data, radius=15, blur=10).add_to(m)

# Add a legend to explain color coding for ratings
legend_html = """
<div style="position: fixed;
            bottom: 50px; left: 50px; width: 150px; height: 100px;
            background-color: white; z-index:9999; font-size:14px;
            border:2px solid grey; padding: 10px;">
    <h4>Rating Legend</h4>
    <i style="background: green; width: 15px; height: 15px; display: inline-block;"></i> High (4+)<br>
    <i style="background: orange; width: 15px; height: 15px; display: inline-block;"></i> Medium (2-4)<br>
    <i style="background: red; width: 15px; height: 15px; display: inline-block;"></i> Low (<2)<br>
</div>
"""
m.get_root().html.add_child(folium.Element(legend_html))

# Display the map
m

##we want to make this map in English, because a lot of tourists can not read Arabic

map_center = [26.8206, 30.8025]
bounds = [[22, 24], [32, 37]]

m = folium.Map(
    location=map_center,
    zoom_start=6,
    tiles="CartoDB Positron",
    attr="Map data © OpenStreetMap contributors, CC-BY-SA, Imagery © CartoDB", ##this overlay helped with translations
    max_bounds=True
)
m.fit_bounds(bounds)

marker_cluster = MarkerCluster().add_to(m)

def get_color(rating):
    if rating >= 4:
        return 'green'
    elif 2 <= rating < 4:
        return 'orange'
    else:
        return 'red'

for idx, row in data.iterrows():
    color = get_color(row['Overall Rating'])
    popup_content = (f"<strong>{row['Name']}</strong><br>"
                     f"Rating: {row['Overall Rating']}<br>"
                     f"Rate per Night: {row['Rate per Night (Lowest)']}<br>"
                     f"Location Rating: {row['Location Rating']}")

    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=popup_content,
        icon=folium.Icon(color=color)
    ).add_to(marker_cluster)

heat_data = [[row['Latitude'], row['Longitude']] for idx, row in data.iterrows()]
HeatMap(heat_data, radius=15, blur=10).add_to(m)

legend_html = """
<div style="position: fixed;
            bottom: 50px; left: 50px; width: 150px; height: 100px;
            background-color: white; z-index:9999; font-size:14px;
            border:2px solid grey; padding: 10px;">
    <h4>Rating Legend</h4>
    <i style="background: green; width: 15px; height: 15px; display: inline-block;"></i> High (4+)<br>
    <i style="background: orange; width: 15px; height: 15px; display: inline-block;"></i> Medium (2-4)<br>
    <i style="background: red; width: 15px; height: 15px; display: inline-block;"></i> Low (<2)<br>
</div>
"""
m.get_root().html.add_child(folium.Element(legend_html))

m

m.save("Egypt_Hotel_Map.html")

# Ensure you have your map object, 'm'
from google.colab import files

# Save the map as an HTML file
m.save("Enhanced_Hotel_Ratings_Map_English.html")

# Download the file
files.download("Enhanced_Hotel_Ratings_Map_English.html")